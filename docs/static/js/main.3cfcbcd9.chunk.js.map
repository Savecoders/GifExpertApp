{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","placeholder","value","onChange","target","GifGridItem","title","url","href","src","alt","getGifs","category","a","urlApi","encodeURI","fetch","resp","json","data","gits","map","imgGifs","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","class","img","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACtB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACC,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKeO,UAAU,SAAxC,SACC,uBACCC,KAAK,OACLC,YAAY,YACZC,MAAOX,EACPY,SAjBuB,SAACT,GAC1BF,EAAcE,EAAEU,OAAOF,QAiBrBH,UAAU,a,QCxBDM,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACpC,OACC,sBAAKR,UAAU,4DAAf,UACC,mBAAGS,KAAMD,EAAT,SACC,mBAAGR,UAAU,gDAEd,qBAAKU,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPMK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACmCC,UACxDH,GAFqB,+DAIHI,MAAMF,GAJH,cAIhBG,EAJgB,gBAKCA,EAAKC,OALN,uBAKdC,EALc,EAKdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAc,CACnCC,GAAID,EAAQC,GACZjB,MAAOgB,EAAQhB,MACfC,IAAG,UAAEe,EAAQE,cAAV,aAAE,EAAgBC,iBAAiBlB,QATjB,kBAefa,GAfe,4CAAH,sDCyBLM,EAtBC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAClB,ECD2B,SAACA,GAC5B,MAA0BtB,mBAAS,CAClC6B,KAAM,GACNQ,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACTnB,EAAQC,GAAUmB,MAAK,SAACC,GAAD,OACtBH,EAAS,CACRV,KAAMa,EACNL,SAAS,SAGT,CAACf,IAEGgB,EDd2BK,CAAarB,GAAjCY,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAEtB,OACC,qCACC,qBAAI5B,UAAU,2CAAd,UACC,mBAAGmC,MAAM,6BADV,IACyCtB,KAExCe,GACA,mBAAG5B,UAAU,mCAAb,SACC,mBAAGA,UAAU,uCAGf,qBAAKA,UAAU,aAAf,SACEyB,EAAOH,KAAI,SAACc,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIZ,aEeZa,EA9BM,WAOpB,MAAoC9C,mBAAS,CAAC,0BAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAIA,OACC,qCACC,qBAAKU,UAAU,aAAf,SACC,qBAAIA,UAAU,oCAAd,UACC,mBAAGmC,MAAM,gBADV,oBAKD,cAAC,EAAD,CAAa7C,cAAeA,IAI3BgD,EAAWhB,KAAI,SAACT,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCtBlB0B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3cfcbcd9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputChange = (e) => {\n\t\tsetInputValue(e.target.value);\n\t};\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (inputValue.trim().length > 2) {\n\t\t\tsetCategories((cats) => [inputValue, ...cats]);\n\t\t\tsetInputValue('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit} className='mg-3vw'>\n\t\t\t<input\n\t\t\t\ttype='text'\n\t\t\t\tplaceholder='Search...'\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={handleInputChange}\n\t\t\t\tclassName='field'\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const GifGridItem = ({ title, url }) => {\n\treturn (\n\t\t<div className='card animate__animated animate__fadeIn animate__delay-1s\"'>\n\t\t\t<a href={url}>\n\t\t\t\t<i className='bx bx-link-alt bx-flip-horizontal bx-tada'></i>\n\t\t\t</a>\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t);\n};\n","export const getGifs = async (category) => {\n\tconst urlApi = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n\t\tcategory\n\t)}&limit=10&api_key=5C317GN26D6GHDEmboOX3nv6oMyvYZpl`;\n\tconst resp = await fetch(urlApi);\n\tconst { data } = await resp.json();\n\tconst gits = data.map((imgGifs) => ({\n\t\tid: imgGifs.id,\n\t\ttitle: imgGifs.title,\n\t\turl: imgGifs.images?.downsized_medium.url,\n\t}));\n\t/* \t\tconsole.log(gits);*/\n\t/* data.forEach(({ url }) => {\n\t\t\tconsole.log(url);\n\t\t}); */\n\treturn gits;\n};\n","import { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t\t<h3 className='mg-3vw animate__animated animate__fadeIn'>\n\t\t\t\t<i class='bx bxs-right-arrow bx-xs' /> {category}\n\t\t\t</h3>\n\t\t\t{loading && (\n\t\t\t\t<p className='animate__animated animate__flash'>\n\t\t\t\t\t<i className='loading bx bx-loader-alt bx-spin'></i>\n\t\t\t\t</p>\n\t\t\t)}\n\t\t\t<div className='card-grid '>\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\tgetGifs(category).then((imgs) =>\n\t\t\tsetState({\n\t\t\t\tdata: imgs,\n\t\t\t\tloading: false,\n\t\t\t})\n\t\t);\n\t}, [category]);\n\n\treturn state;\n};\n","import { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\nconst GitExpertApp = () => {\n\t/* const categories = [\n\t\t'One Piece',\n\t\t'Hunter X Hunter',\n\t\t'Full Metal Alchemist',\n\t\t'One Punch',\n\t]; */\n\tconst [categories, setCategories] = useState(['Full Metal Alchemists']);\n\t/* const handleAdd = () => setCategories((cats) => [...cats, 'Boku no hero']);\n\tconst handleDelete = () => setCategories((cats) => cats.splice(0, cats.length - 1)); */\n\t/* \tcategories.filter((categorie) => categorie !== categories[categories.length - 1]) */\n\treturn (\n\t\t<>\n\t\t\t<nav className='navigation'>\n\t\t\t\t<h2 className='animate__animated animate__fadeIn'>\n\t\t\t\t\t<i class='bx bxs-gift' />\n\t\t\t\t\tGifExpertApp\n\t\t\t\t</h2>\n\t\t\t</nav>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t{/*The keys are an important part for reactj to take into account\n         the state of our application and thus have a specific order and\n        if any change was made, react will take it into account */}\n\t\t\t{categories.map((category) => (\n\t\t\t\t<GifGrid key={category} category={category} />\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport default GitExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(<GitExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}